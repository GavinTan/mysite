"use strict";(self.webpackChunkmysite=self.webpackChunkmysite||[]).push([[797],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(96540);const s={},o=t.createContext(s);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:n},e.children)}},47001:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"\u7b14\u8bb0/python","title":"python","description":"python http\u670d\u52a1\u5668","source":"@site/docs/\u7b14\u8bb0/python.md","sourceDirName":"\u7b14\u8bb0","slug":"/\u7b14\u8bb0/python","permalink":"/docs/\u7b14\u8bb0/python","draft":false,"unlisted":false,"editUrl":"https://github.com/gavintan/notes/docs/\u7b14\u8bb0/python.md","tags":[],"version":"current","frontMatter":{},"sidebar":"doc","previous":{"title":"mac","permalink":"/docs/\u7b14\u8bb0/mac"},"next":{"title":"\u524d\u7aef","permalink":"/docs/\u7b14\u8bb0/\u524d\u7aef"}}');var s=r(74848),o=r(28453);const i={},a=void 0,l={},c=[{value:"python http\u670d\u52a1\u5668",id:"python-http\u670d\u52a1\u5668",level:2},{value:"python \u83b7\u53d6\u672c\u673a IP",id:"python-\u83b7\u53d6\u672c\u673a-ip",level:2},{value:"python \u540e\u53f0\u8fdb\u7a0b",id:"python-\u540e\u53f0\u8fdb\u7a0b",level:2},{value:"tornado \u5f02\u6b65demo",id:"tornado-\u5f02\u6b65demo",level:2},{value:"python \u5b9a\u65f6\u4efb\u52a1",id:"python-\u5b9a\u65f6\u4efb\u52a1",level:2},{value:"\u968f\u673a\u914d\u5bf9",id:"\u968f\u673a\u914d\u5bf9",level:2},{value:"scrapy\u722c\u866b",id:"scrapy\u722c\u866b",level:2},{value:"celery\u81ea\u5b9a\u4e49result_backend\u540e\u7aef",id:"celery\u81ea\u5b9a\u4e49result_backend\u540e\u7aef",level:2},{value:"django-rest-framework ModelViewSet context\u6dfb\u52a0\u5185\u5bb9",id:"django-rest-framework-modelviewset-context\u6dfb\u52a0\u5185\u5bb9",level:2},{value:"django\u6267\u884c\u539f\u59cbsql",id:"django\u6267\u884c\u539f\u59cbsql",level:2},{value:"django\u83b7\u53d6\u5f53\u524durl",id:"django\u83b7\u53d6\u5f53\u524durl",level:2},{value:"celery \u8c03\u7528ansible api\u6ca1\u6709\u8fd4\u56de",id:"celery-\u8c03\u7528ansible-api\u6ca1\u6709\u8fd4\u56de",level:2},{value:"flask \u63a5\u53e3\u6388\u6743\u8ba4\u8bc1",id:"flask-\u63a5\u53e3\u6388\u6743\u8ba4\u8bc1",level:2},{value:"Python \u751f\u6210pyc\u6587\u4ef6",id:"python-\u751f\u6210pyc\u6587\u4ef6",level:2},{value:"python \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6",id:"python-\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6",level:2},{value:"django \u6a21\u677ffor\u652f\u6301zip",id:"django-\u6a21\u677ffor\u652f\u6301zip",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"python-http\u670d\u52a1\u5668",children:"python http\u670d\u52a1\u5668"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-shell",children:'import http.server\nimport socketserver\n\n\nPORT = 80\n\n\nHandler = http.server.SimpleHTTPRequestHandler\n\n\nwith socketserver.TCPServer(("", PORT), Handler) as httpd:\n    print("serving at port", PORT)\n    httpd.serve_forever()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"python-\u83b7\u53d6\u672c\u673a-ip",children:"python \u83b7\u53d6\u672c\u673a IP"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import socket\ndef get_host_ip():\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        s.connect(('8.8.8.8', 80))\n        ip = s.getsockname()[0]\n    finally:\n        s.close()\n        return ip\n"})}),"\n",(0,s.jsx)(n.h2,{id:"python-\u540e\u53f0\u8fdb\u7a0b",children:"python \u540e\u53f0\u8fdb\u7a0b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",metastring:"title=daemon.py",children:"#!/usr/bin/env python3\n\nimport osimport sys\nimport atexit\nimport signal\n\n\ndef daemonize(pidfile, *, stdin='/dev/null',\n                          stdout='/dev/null',\n                          stderr='/dev/null'):\n\n    if os.path.exists(pidfile):\n        raise RuntimeError('Already running')\n\n    # First fork (detaches from parent)\n    try:\n        if os.fork() > 0:\n            raise SystemExit(0)   # Parent exit\n    except OSError as e:\n        raise RuntimeError('fork #1 failed.')\n\n    os.chdir('/')\n    os.umask(0)\n    os.setsid()\n    # Second fork (relinquish session leadership)\n    try:\n        if os.fork() > 0:\n            raise SystemExit(0)\n    except OSError as e:\n        raise RuntimeError('fork #2 failed.')\n\n\n    # Flush I/O buffers\n    sys.stdout.flush()\n    sys.stderr.flush()\n\n    # Replace file descriptors for stdin, stdout, and stderr\n    with open(stdin, 'rb', 0) as f:\n        os.dup2(f.fileno(), sys.stdin.fileno())\n    with open(stdout, 'ab', 0) as f:\n        os.dup2(f.fileno(), sys.stdout.fileno())\n    with open(stderr, 'ab', 0) as f:\n        os.dup2(f.fileno(), sys.stderr.fileno())\n\n    # Write the PID file\n    with open(pidfile,'w') as f:\n        print(os.getpid(),file=f)\n\n    # Arrange to have the PID file removed on exit/signal\n    atexit.register(lambda: os.remove(pidfile))\n\n    # Signal handler for termination (required)\n    def sigterm_handler(signo, frame):\n        raise SystemExit(1)\n\n    signal.signal(signal.SIGTERM, sigterm_handler)\n\ndef main():\n    import time\n    sys.stdout.write('Daemon started with pid {}\\n'.format(os.getpid()))\n    while True:\n        sys.stdout.write('Daemon Alive! {}\\n'.format(time.ctime()))\n        time.sleep(10)\n\n\nif __name__ == '__main__':\n    PIDFILE = '/tmp/daemon.pid'\n\n    if len(sys.argv) != 2:\n        print('Usage: {} [start|stop]'.format(sys.argv[0]), file=sys.stderr)\n        raise SystemExit(1)\n\n    if sys.argv[1] == 'start':\n        try:\n            daemonize(PIDFILE,\n                      stdout='/tmp/daemon.log',\n                      stderr='/tmp/dameon.log')\n        except RuntimeError as e:\n            print(e, file=sys.stderr)\n            raise SystemExit(1)\n\n        main()\n\n    elif sys.argv[1] == 'stop':\n        if os.path.exists(PIDFILE):\n            with open(PIDFILE) as f:\n                os.kill(int(f.read()), signal.SIGTERM)\n        else:\n            print('Not running', file=sys.stderr)\n            raise SystemExit(1)\n\n    else:\n        print('Unknown command {!r}'.format(sys.argv[1]), file=sys.stderr)\n        raise SystemExit(1)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p14_launching_daemon_process_on_unix.html",children:"https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p14_launching_daemon_process_on_unix.html"})]}),"\n",(0,s.jsx)(n.h2,{id:"tornado-\u5f02\u6b65demo",children:"tornado \u5f02\u6b65demo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from re import T\nimport tornado.ioloop\nimport tornado.web\nfrom tornado.concurrent import run_on_executor\nfrom concurrent.futures import ThreadPoolExecutor\n\n\nclass MainHandler(tornado.web.RequestHandler):\n    executor = ThreadPoolExecutor(max_workers=2)\n\n\n    def get(self):\n        self.write("Hello, world")\n\n\n    @run_on_executor\n    def aa(self):\n        import os\n        os.system(\'ping qq.com\')\n        return \'qq.com\'\n\n\n    @tornado.gen.coroutine\n    def post(self):\n        print(self.get_argument(\'aa121\', None))\n        print(self.get_argument(\'ff\', None))\n\n\n        yield self.aa()\n        self.finish()\n    \n    def put(self):\n        self.write("222")\n\n\n    def delete(self):\n        self.write("333")\n\n\ndef make_app():\n    return tornado.web.Application([\n        (r"/", MainHandler),\n    ], debug=True)\n\n\nif __name__ == "__main__":\n    app = make_app()\n    app.listen(8888)\n    tornado.ioloop.IOLoop.current().start()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"python-\u5b9a\u65f6\u4efb\u52a1",children:"python \u5b9a\u65f6\u4efb\u52a1"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from apscheduler.schedulers.blocking import BlockingScheduler\n\ndef test(**kwargs)\uff1a\n  pass\n\nscheduler = BlockingScheduler()\nscheduler.add_job(test, trigger="date", run_date=\'2021-02-14 15:01:05\', kwargs={"desc": "123"})\n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u968f\u673a\u914d\u5bf9",children:"\u968f\u673a\u914d\u5bf9"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import random\na=[1,2,3,4,5,6,7,8,9,10]\n\n\nrandom.shuffle(a)\n\n\nd= list(range(0,len(a),2))\n\nfor i in d:\n    print(a[i:i+2])\n"})}),"\n",(0,s.jsx)(n.h2,{id:"scrapy\u722c\u866b",children:"scrapy\u722c\u866b"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import scrapy\n\nclass yxSpider(scrapy.Spider):\n    name = 'yinxiao'\n    allowed_domains = ['sc.chinaz.com']\n    start_urls = ['http://sc.chinaz.com/yinxiao/index_{0}.html'.format(i) for i in range(2, 10)]\n    start_urls.append('http://sc.chinaz.com/yinxiao/')\n\n    def parse(self, response):\n        for i in response.xpath('//div[@class=\"text_left\"]//div[@class=\"music_block\"]'):\n            yield {\n                '\u540d\u79f0': i.xpath('p[@class=\"z\"]//text()').extract(),\n                '\u4e0b\u8f7d\u94fe\u63a5': i.xpath('p[@class=\"n1\"]//@thumb').extract()\n            }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"celery\u81ea\u5b9a\u4e49result_backend\u540e\u7aef",children:"celery\u81ea\u5b9a\u4e49result_backend\u540e\u7aef"}),"\n",(0,s.jsx)(n.p,{children:"\u81ea\u5b9a\u4e49\u6a21\u5757"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"#celery_backends:DatabaseBackend\nfrom celery.backends.base import BaseDictBackend\n\nclass DatabaseBackend(BaseDictBackend):\n    def _store_result(self, task_id, result, status, traceback=None, request=None):\n        print(result)\n        print(task_id)\n        print(request)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u914d\u7f6e\u4f7f\u7528\u81ea\u5b9a\u4e49\u6a21\u5757"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# celery\u52a0\u8f7dresult_backend\u914d\u7f6e\u65f6\u4f1a\u52a0\u8f7dentry_point\u4e2d\u7684\u914d\u7f6e\uff0cdjango-celery-results\u57fa\u4e8e\u8be5\u65b9\u5f0f\n# \u6ce8\u518centry_point\uff0c\u4f9bcelery\u89e3\u6790result_backend\u65f6\u8c03\u7528\u81ea\u5b9a\u4e49\u6a21\u5757\n# distribution._ep_map.clear()    # \u6e05\u9664\u6ce8\u518c\u7684entry_point\ndistribution = pkg_resources.Distribution(__name__)\nentry_point = pkg_resources.EntryPoint.parse('yw-db = apps.common.modules.celery_backends:DatabaseBackend', dist=distribution)\ndistribution._ep_map = {'celery.result_backends': {'yw-db': entry_point}}\npkg_resources.working_set.add(distribution)\n\n\n# \u4f7f\u7528\u8be5\u914d\u7f6e\napp.conf.result_backend = 'yw-db'\n"})}),"\n",(0,s.jsx)(n.h2,{id:"django-rest-framework-modelviewset-context\u6dfb\u52a0\u5185\u5bb9",children:"django-rest-framework ModelViewSet context\u6dfb\u52a0\u5185\u5bb9"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u65b9\u6cd5\u4e00\uff1a"})}),"\n",(0,s.jsx)(n.p,{children:"ViewSet:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class LanguageViewSet(viewsets.ModelViewSet):\n    queryset = Language.objects.all()\n    serializer_class = LanguageSerializer\n    filter_backends = (filters.DjangoFilterBackend, )\n    filter_fields = ('name', 'active')\n\n    def get_serializer_context(self):\n        context = super().get_serializer_context()\n        context['foo'] = 'bar'\n        return context\n"})}),"\n",(0,s.jsx)(n.p,{children:"Serializer:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class YourSerializer(serializers.Serializer):\n    field = serializers.CharField()\n\n    def to_representation(self, instance):\n        ret = super().to_representation(instance)\n        # Access self.context here to add contextual data into ret\n        ret['foo'] = self.context['foo']\n        return ret\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u65b9\u6cd5\u4e8c\uff1a"})}),"\n",(0,s.jsx)(n.p,{children:"\u521b\u5efa\u81ea\u5b9a\u4e49TemplateHTMLRenderer"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class TemplateHTMLRendererWithContext(TemplateHTMLRenderer):\n    def render(self, data, accepted_media_type=None, renderer_context=None):\n        # We can't really call super in this case, since we need to modify the inner working a bit\n        renderer_context = renderer_context or {}\n        view = renderer_context.pop('view')\n        request = renderer_context.pop('request')\n        response = renderer_context.pop('response')\n        view_kwargs = renderer_context.pop('kwargs')\n        view_args = renderer_context.pop('args')\n\n        if response.exception:\n            template = self.get_exception_template(response)\n        else:\n            template_names = self.get_template_names(response, view)\n            template = self.resolve_template(template_names)\n\n        context = self.resolve_context(data, request, response, render_context)\n        return template_render(template, context, request=request)\n\n    def resolve_context(self, data, request, response, render_context):\n        if response.exception:\n            data['status_code'] = response.status_code\n        data.update(render_context)\n        return data\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u901a\u8fc7get_renderer_context\u65b9\u6cd5\u6dfb\u52a0\u6570\u636e"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class LanguageViewSet(viewsets.ModelViewSet):\n    \n    queryset = Language.objects.all()\n    serializer_class = LanguageSerializer\n    filter_backends = (filters.DjangoFilterBackend, )\n    filter_fields = ('name', 'active')\n\n    def get_renderer_context(self):\n        context = super().get_renderer_context()\n        context['foo'] = 'bar'\n        return context\n"})}),"\n",(0,s.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://stackoverflow.com/questions/39202380/django-rest-framework-how-to-add-context-to-a-viewset?noredirect=1&lq=1",children:"https://stackoverflow.com/questions/39202380/django-rest-framework-how-to-add-context-to-a-viewset?noredirect=1&lq=1"})]}),"\n",(0,s.jsx)(n.h2,{id:"django\u6267\u884c\u539f\u59cbsql",children:"django\u6267\u884c\u539f\u59cbsql"}),"\n",(0,s.jsx)(n.p,{children:"model raw\u6267\u884c\u539f\u59cbsql\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"people = Person.objects.raw('SELECT id, first_name FROM myapp_person')\n"})}),"\n",(0,s.jsx)(n.p,{children:"\u76f4\u63a5\u64cd\u4f5csettings\u914d\u7f6e\u7684\u9ed8\u8ba4\u6570\u636e\u5e93:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from django.db import connection\n\ndef my_custom_sql(self):\n    with connection.cursor() as cursor:\n        cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])\n        cursor.execute("SELECT foo FROM bar WHERE baz = %s", [self.baz])\n        row = cursor.fetchone()\n    return row\n'})}),"\n",(0,s.jsx)(n.p,{children:"settings\u914d\u7f6e\u591a\u4e2a\u6570\u636e\u5e93\u65f6\u6307\u5b9a\u6570\u636e\u5e93:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from django.db import connections\n\ndef my_custom_sql(self):\n    with connections[\'my_db_alias\'].cursor() as cursor:\n        cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])\n        cursor.execute("SELECT foo FROM bar WHERE baz = %s", [self.baz])\n        row = cursor.fetchone()\n\n    return row\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"\u6267\u884csql\u7ed3\u679c\u4ee5dict\u8fd4\u56de\uff0c\u540cpymysql cursor = db.cursor(pymysql.cursors.DictCursor)\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# \u81ea\u5b9a\u4e49\u51fd\u6570\ndef dictfetchall(cursor):\n    "Return all rows from a cursor as a dict"\n    columns = [col[0] for col in cursor.description]\n    return [dict(zip(columns, row)) for row in cursor.fetchall()]\n\nwith connections[\'my_db_alias\'].cursor() as cursor:\n   cursor.execute("UPDATE bar SET foo = 1 WHERE baz = %s", [self.baz])\nrow = dictfetchall(cursor)\n'})}),"\n",(0,s.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://docs.djangoproject.com/en/2.1/topics/db/sql/#executing-custom-sql-directly",children:"https://docs.djangoproject.com/en/2.1/topics/db/sql/#executing-custom-sql-directly"})]}),"\n",(0,s.jsx)(n.h2,{id:"django\u83b7\u53d6\u5f53\u524durl",children:"django\u83b7\u53d6\u5f53\u524durl"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"request.scheme\uff1a \u83b7\u53d6http/https\u7c7b\u578b"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"request.get_host()\uff1a \u83b7\u53d6url\u670d\u52a1\u5668\u5730\u5740"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"request.path\uff1a \u83b7\u53d6url \u8def\u5f84"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"request.build_absolute_uri()\uff1a\u83b7\u53d6\u5b8c\u6574\u7684url"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"from django.urls import resolve"}),"\n",(0,s.jsx)(n.p,{children:"resolve(self.request.path).url_name\uff1a\u83b7\u53d6\u5f53\u524durl name"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"from django.urls import reverse"}),"\n",(0,s.jsx)(n.p,{children:"reverse(resolve(self.request.path).url_name)\uff1a\u6839\u636eurl name\u83b7\u53d6url\u8def\u5f84"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"celery-\u8c03\u7528ansible-api\u6ca1\u6709\u8fd4\u56de",children:"celery \u8c03\u7528ansible api\u6ca1\u6709\u8fd4\u56de"}),"\n",(0,s.jsx)(n.p,{children:"\u89e3\u51b3\u65b9\u6cd5\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import multiprocessing\n\n# multiprocessing\u4e0d\u5141\u8bb8\u5b88\u62a4\u8fdb\u7a0b\u521b\u5efa\u5b50\u8fdb\u7a0b\u3002\u5426\u5219\uff0c\u5b88\u62a4\u8fdb\u7a0b\u4f1a\u5728\u5b50\u8fdb\u7a0b\u9000\u51fa\u65f6\u7ec8\u6b62\u5176\u5b50\u8fdb\u7a0b\u9020\u6210ansible\u547d\u4ee4\u6ca1\u6709\u6267\u884c\u8fd4\u56de\u4e3a\u7a7a\nmultiprocessing.current_process()._config['daemon'] = False     # \u5173\u95eddaemon\n"})}),"\n",(0,s.jsx)(n.p,{children:"daemon\u5b50\u8fdb\u7a0b\u4e0d\u80fd\u5728\u901a\u8fc7multiprocessing\u521b\u5efa\u540e\u4ee3\u8fdb\u7a0b\uff0c\u5426\u5219\u5f53\u7236\u8fdb\u7a0b\u9000\u51fa\u540e\uff0c\u5b83\u7ec8\u7ed3\u5176daemon\u5b50\u8fdb\u7a0b\uff0c\u90a3\u5b59\u5b50\u8fdb\u7a0b\u5c31\u6210\u4e86\u5b64\u7acb\u7684\u8fdb\u7a0b\u4e86\u3002"}),"\n",(0,s.jsx)(n.p,{children:"\u5f53\u5c1d\u8bd5\u8fd9\u4e48\u505a\u65f6\uff0c\u4f1a\u62a5\u9519\uff1aAssertionError: daemonic processes are not allowed to have children\u4f46\u662f\uff0cdaemon\u5b50\u8fdb\u7a0b\u8fd8\u53ef\u4ee5\u901a\u8fc7subprocess\u521b\u5efa\u540e\u4ee3\u8fdb\u7a0b\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u53c2\u8003\uff1a",(0,s.jsx)(n.a,{href:"https://www.jianshu.com/p/4c916810cf8d",children:"https://www.jianshu.com/p/4c916810cf8d"})]}),"\n",(0,s.jsx)(n.h2,{id:"flask-\u63a5\u53e3\u6388\u6743\u8ba4\u8bc1",children:"flask \u63a5\u53e3\u6388\u6743\u8ba4\u8bc1"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/responsible/Flask-Restful-Role-Auth",children:"https://github.com/responsible/Flask-Restful-Role-Auth"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://pythonhosted.org/Flask-JWT/",children:"https://pythonhosted.org/Flask-JWT/"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.jianshu.com/p/2367daef7fa6",children:"https://www.jianshu.com/p/2367daef7fa6"})}),"\n",(0,s.jsx)(n.h2,{id:"python-\u751f\u6210pyc\u6587\u4ef6",children:"Python \u751f\u6210pyc\u6587\u4ef6"}),"\n",(0,s.jsx)(n.p,{children:"\u652f\u6301\u6307\u5b9a\u6587\u4ef6\u6216\u8def\u5f84"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"python -m py_compile /tmp/a.py\n"})}),"\n",(0,s.jsx)(n.h2,{id:"python-\u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6",children:"python \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:"title=config",children:"[db]\ndb_port = 3306\ndb_user = root\ndb_host = 127.0.0.1\ndb_pass = xgmtest\n\n[concurrent]\nprocessor = 20\nthread = 10\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"import ConfigParser    #\u5f15\u7528\u6a21\u5757\n\nconfig = ConfigParser.ConfigParser() #\u76f4\u63a5\u8bfb\u53d6ini\u6587\u4ef6\u5185\u5bb9\uff0c\u521d\u59cb\u5316config\u5b9e\u4f8b\uff08\u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684\u6570\u636e\u96c6\u5b9e\u4f8b\uff09\nconfig.read(filename)  #\u901a\u8fc7load\u6587\u4ef6filename\u6765\u521d\u59cb\u5316config\u5b9e\u4f8b\nconfig.write(open(filename,'w'))   #\u4fdd\u5b58\u914d\u7f6e\nconfig.get(section, key) #\u83b7\u5f97\u6307\u5b9asection\u4e2d\u7684key\u7684value\nconfig.getint(section, key)\nconfig.getfloat(section, key)\nconfig.getboolean(section, key)\nconfig.set(section, key, value)  #\u5728\u6307\u5b9asection\u4e2d\uff0c\u6dfb\u52a0\u4e00\u5bf9key-value\u952e\u503c\u5bf9\uff0c\u6ca1\u6709section\u65f6\u8fd4\u56de NoSectionError\u5f02\u5e38\n\n\nconfig.add_section(section) #\u6dfb\u52a0sectio\uff0c\u82e5\u5df2\u7ecf\u5b58\u5728\uff0c\u8fd4\u56deDuplicateSectionError\u5f02\u5e38\nconfig.remove_section(section)     #\u5220\u9664\u6307\u5b9asection\uff0c\u53ea\u6709\u5b58\u653e\u5e76\u79fb\u9664\u65f6\u624d\u4f1a\u8fd4\u56deTrue\uff0c\u5176\u4ed6\u8fd4\u56deFalse\nconfig.remove_option(section, key) #\u5220\u9664\u6307\u5b9asection\u7684key\uff0c\u6210\u529f\u8fd4\u56deTrue, \u5931\u8d25\u8fd4\u56deFalse\uff0c\u4e0d\u5b58\u5728section\u65f6\u629b\u51faNoSectionError\u5f02\u5e38\nconfig.items(section) #\u8fd4\u56de\u6307\u5b9asection\u5185\u7684\u952e\u503c\u5bf9\u5217\u8868(name, value) pairs\nconfig.sections() #\u5f97\u5230\u6240\u6709\u7684section\uff0c\u5e76\u4ee5\u5217\u8868\u7684\u5f62\u5f0f\u8fd4\u56de\nconfig.options(section) #\u5f97\u5230\u8be5section\u7684\u6240\u6709option\uff0c\u4e5f\u5c31\u662fkey=value\u4e2d\u7684key\u90e8\u5206\n\nconfig.has_section(section) #\u5224\u65ad\u6307\u5b9a\u7684\u8282\u662f\u5426\u5df2\u7ecf\u5b58\u5728\nconfig.has_option(section, option) #\u5224\u65ad\u6307\u5b9a\u7684\u8282\u662f\u5426\u5b58\u5728option\uff0c\u5b58\u5728\u5c31\u8fd4\u56deTrue\uff0c\u5426\u5219\u8fd4\u56deFalse\n"})}),"\n",(0,s.jsx)(n.h2,{id:"django-\u6a21\u677ffor\u652f\u6301zip",children:"django \u6a21\u677ffor\u652f\u6301zip"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"pip install django-multiforloop"}),"\n",(0,s.jsx)(n.li,{children:"Include 'multiforloop' in your settings.py's list of installed apps"}),"\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"{% load multifor %}"})," to the top of any templates which use the multiforloop"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"\u6a21\u677f\u52a0\u8f7d\u9519\u8bef\u89e3\u51b3\u65b9\u6cd5\n-Python 2:"}),"\n",(0,s.jsx)(n.p,{children:"Add to pip requirements.py django-multiforloop-patched >= 0.2.0"}),"\n",(0,s.jsx)(n.p,{children:"-Python 3:"}),"\n",(0,s.jsx)(n.p,{children:"1 -> Copy multiforloop/templatetags to a templatetags folder in your project."}),"\n",(0,s.jsx)(n.p,{children:"2 -> replace from itertools import izip_longest with from itertools import zip_longest"}),"\n",(0,s.jsx)(n.p,{children:"replace from django.template.base import Library with from django import template"}),"\n",(0,s.jsx)(n.p,{children:"replace register = Library() with register = template.Library()"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/gabrielgrant/django-multiforloop",children:"https://github.com/gabrielgrant/django-multiforloop"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);